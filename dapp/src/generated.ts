// Generated by @wagmi/cli@1.3.0 on 7/24/2023 at 5:21:39 PM
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// FlowSplitter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const flowSplitterABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'host_', internalType: 'contract ISuperfluid', type: 'address' },
      {
        name: 'acceptedSuperToken_',
        internalType: 'contract ISuperToken',
        type: 'address',
      },
      { name: 'mainReceiver_', internalType: 'address', type: 'address' },
      { name: 'sideReceiver_', internalType: 'address', type: 'address' },
      { name: 'sideReceiverPortion_', internalType: 'int96', type: 'int96' },
    ],
  },
  { type: 'error', inputs: [], name: 'INVALID_PORTION' },
  { type: 'error', inputs: [], name: 'NO_SELF_FLOW' },
  { type: 'error', inputs: [], name: 'NotAcceptedSuperToken' },
  { type: 'error', inputs: [], name: 'NotImplemented' },
  { type: 'error', inputs: [], name: 'SAME_RECEIVERS_NOT_ALLOWED' },
  { type: 'error', inputs: [], name: 'UnauthorizedHost' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'mainReceiverPortion',
        internalType: 'int96',
        type: 'int96',
        indexed: false,
      },
      {
        name: 'newSideReceiverPortion',
        internalType: 'int96',
        type: 'int96',
        indexed: false,
      },
    ],
    name: 'SplitUpdated',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ACCEPTED_SUPER_TOKEN',
    outputs: [
      { name: '', internalType: 'contract ISuperToken', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'CFAV1_TYPE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'HOST',
    outputs: [
      { name: '', internalType: 'contract ISuperfluid', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MAIN_RECEIVER',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'SIDE_RECEIVER',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'superToken',
        internalType: 'contract ISuperToken',
        type: 'address',
      },
      { name: 'agreementClass', internalType: 'address', type: 'address' },
      { name: '', internalType: 'bytes32', type: 'bytes32' },
      { name: 'agreementData', internalType: 'bytes', type: 'bytes' },
      { name: '', internalType: 'bytes', type: 'bytes' },
      { name: 'ctx', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'afterAgreementCreated',
    outputs: [{ name: 'newCtx', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'superToken',
        internalType: 'contract ISuperToken',
        type: 'address',
      },
      { name: 'agreementClass', internalType: 'address', type: 'address' },
      { name: '', internalType: 'bytes32', type: 'bytes32' },
      { name: 'agreementData', internalType: 'bytes', type: 'bytes' },
      { name: 'cbdata', internalType: 'bytes', type: 'bytes' },
      { name: 'ctx', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'afterAgreementTerminated',
    outputs: [{ name: 'newCtx', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'superToken',
        internalType: 'contract ISuperToken',
        type: 'address',
      },
      { name: 'agreementClass', internalType: 'address', type: 'address' },
      { name: '', internalType: 'bytes32', type: 'bytes32' },
      { name: 'agreementData', internalType: 'bytes', type: 'bytes' },
      { name: 'cbdata', internalType: 'bytes', type: 'bytes' },
      { name: 'ctx', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'afterAgreementUpdated',
    outputs: [{ name: 'newCtx', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '', internalType: 'contract ISuperToken', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'bytes32', type: 'bytes32' },
      { name: '', internalType: 'bytes', type: 'bytes' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'beforeAgreementCreated',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'superToken',
        internalType: 'contract ISuperToken',
        type: 'address',
      },
      { name: 'agreementClass', internalType: 'address', type: 'address' },
      { name: '', internalType: 'bytes32', type: 'bytes32' },
      { name: 'agreementData', internalType: 'bytes', type: 'bytes' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'beforeAgreementTerminated',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'superToken',
        internalType: 'contract ISuperToken',
        type: 'address',
      },
      { name: 'agreementClass', internalType: 'address', type: 'address' },
      { name: '', internalType: 'bytes32', type: 'bytes32' },
      { name: 'agreementData', internalType: 'bytes', type: 'bytes' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'beforeAgreementUpdated',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'flowRate_', internalType: 'int96', type: 'int96' },
      { name: 'sideReceiverPortion_', internalType: 'int96', type: 'int96' },
    ],
    name: 'getMainAndSideReceiverFlowRates',
    outputs: [
      { name: 'mainFlowRate', internalType: 'int96', type: 'int96' },
      { name: 'sideFlowRate', internalType: 'int96', type: 'int96' },
      { name: 'residualFlowRate', internalType: 'int96', type: 'int96' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'superToken_',
        internalType: 'contract ISuperToken',
        type: 'address',
      },
    ],
    name: 'isAcceptedSuperToken',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'sideReceiverPortion',
    outputs: [{ name: '', internalType: 'int96', type: 'int96' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newSideReceiverPortion_', internalType: 'int96', type: 'int96' },
    ],
    name: 'updateSplit',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// FlowSplitterFactory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const flowSplitterFactoryABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'host_', internalType: 'contract ISuperfluid', type: 'address' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'superToken',
        internalType: 'contract ISuperToken',
        type: 'address',
        indexed: true,
      },
      {
        name: 'flowSplitterCreator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'mainReceiver',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'sideReceiver',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'flowSplitter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'mainReceiverPortion',
        internalType: 'int96',
        type: 'int96',
        indexed: false,
      },
      {
        name: 'sideReceiverPortion',
        internalType: 'int96',
        type: 'int96',
        indexed: false,
      },
    ],
    name: 'FlowSplitterCreated',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'HOST',
    outputs: [
      { name: '', internalType: 'contract ISuperfluid', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'superToken_',
        internalType: 'contract ISuperToken',
        type: 'address',
      },
      { name: 'mainReceiver_', internalType: 'address', type: 'address' },
      { name: 'sideReceiver_', internalType: 'address', type: 'address' },
      { name: 'sideReceiverPortion_', internalType: 'int96', type: 'int96' },
    ],
    name: 'deployFlowSplitter',
    outputs: [
      { name: 'flowSplitter', internalType: 'address', type: 'address' },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link flowSplitterABI}__.
 */
export function useFlowSplitterRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof flowSplitterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof flowSplitterABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: flowSplitterABI,
    ...config,
  } as UseContractReadConfig<
    typeof flowSplitterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link flowSplitterABI}__ and `functionName` set to `"ACCEPTED_SUPER_TOKEN"`.
 */
export function useFlowSplitterAcceptedSuperToken<
  TFunctionName extends 'ACCEPTED_SUPER_TOKEN',
  TSelectData = ReadContractResult<typeof flowSplitterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof flowSplitterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: flowSplitterABI,
    functionName: 'ACCEPTED_SUPER_TOKEN',
    ...config,
  } as UseContractReadConfig<
    typeof flowSplitterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link flowSplitterABI}__ and `functionName` set to `"CFAV1_TYPE"`.
 */
export function useFlowSplitterCfav1Type<
  TFunctionName extends 'CFAV1_TYPE',
  TSelectData = ReadContractResult<typeof flowSplitterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof flowSplitterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: flowSplitterABI,
    functionName: 'CFAV1_TYPE',
    ...config,
  } as UseContractReadConfig<
    typeof flowSplitterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link flowSplitterABI}__ and `functionName` set to `"HOST"`.
 */
export function useFlowSplitterHost<
  TFunctionName extends 'HOST',
  TSelectData = ReadContractResult<typeof flowSplitterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof flowSplitterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: flowSplitterABI,
    functionName: 'HOST',
    ...config,
  } as UseContractReadConfig<
    typeof flowSplitterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link flowSplitterABI}__ and `functionName` set to `"MAIN_RECEIVER"`.
 */
export function useFlowSplitterMainReceiver<
  TFunctionName extends 'MAIN_RECEIVER',
  TSelectData = ReadContractResult<typeof flowSplitterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof flowSplitterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: flowSplitterABI,
    functionName: 'MAIN_RECEIVER',
    ...config,
  } as UseContractReadConfig<
    typeof flowSplitterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link flowSplitterABI}__ and `functionName` set to `"SIDE_RECEIVER"`.
 */
export function useFlowSplitterSideReceiver<
  TFunctionName extends 'SIDE_RECEIVER',
  TSelectData = ReadContractResult<typeof flowSplitterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof flowSplitterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: flowSplitterABI,
    functionName: 'SIDE_RECEIVER',
    ...config,
  } as UseContractReadConfig<
    typeof flowSplitterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link flowSplitterABI}__ and `functionName` set to `"beforeAgreementCreated"`.
 */
export function useFlowSplitterBeforeAgreementCreated<
  TFunctionName extends 'beforeAgreementCreated',
  TSelectData = ReadContractResult<typeof flowSplitterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof flowSplitterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: flowSplitterABI,
    functionName: 'beforeAgreementCreated',
    ...config,
  } as UseContractReadConfig<
    typeof flowSplitterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link flowSplitterABI}__ and `functionName` set to `"beforeAgreementTerminated"`.
 */
export function useFlowSplitterBeforeAgreementTerminated<
  TFunctionName extends 'beforeAgreementTerminated',
  TSelectData = ReadContractResult<typeof flowSplitterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof flowSplitterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: flowSplitterABI,
    functionName: 'beforeAgreementTerminated',
    ...config,
  } as UseContractReadConfig<
    typeof flowSplitterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link flowSplitterABI}__ and `functionName` set to `"beforeAgreementUpdated"`.
 */
export function useFlowSplitterBeforeAgreementUpdated<
  TFunctionName extends 'beforeAgreementUpdated',
  TSelectData = ReadContractResult<typeof flowSplitterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof flowSplitterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: flowSplitterABI,
    functionName: 'beforeAgreementUpdated',
    ...config,
  } as UseContractReadConfig<
    typeof flowSplitterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link flowSplitterABI}__ and `functionName` set to `"getMainAndSideReceiverFlowRates"`.
 */
export function useFlowSplitterGetMainAndSideReceiverFlowRates<
  TFunctionName extends 'getMainAndSideReceiverFlowRates',
  TSelectData = ReadContractResult<typeof flowSplitterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof flowSplitterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: flowSplitterABI,
    functionName: 'getMainAndSideReceiverFlowRates',
    ...config,
  } as UseContractReadConfig<
    typeof flowSplitterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link flowSplitterABI}__ and `functionName` set to `"isAcceptedSuperToken"`.
 */
export function useFlowSplitterIsAcceptedSuperToken<
  TFunctionName extends 'isAcceptedSuperToken',
  TSelectData = ReadContractResult<typeof flowSplitterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof flowSplitterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: flowSplitterABI,
    functionName: 'isAcceptedSuperToken',
    ...config,
  } as UseContractReadConfig<
    typeof flowSplitterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link flowSplitterABI}__ and `functionName` set to `"sideReceiverPortion"`.
 */
export function useFlowSplitterSideReceiverPortion<
  TFunctionName extends 'sideReceiverPortion',
  TSelectData = ReadContractResult<typeof flowSplitterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof flowSplitterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: flowSplitterABI,
    functionName: 'sideReceiverPortion',
    ...config,
  } as UseContractReadConfig<
    typeof flowSplitterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link flowSplitterABI}__.
 */
export function useFlowSplitterWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof flowSplitterABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof flowSplitterABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof flowSplitterABI, TFunctionName, TMode>({
    abi: flowSplitterABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link flowSplitterABI}__ and `functionName` set to `"afterAgreementCreated"`.
 */
export function useFlowSplitterAfterAgreementCreated<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof flowSplitterABI,
          'afterAgreementCreated'
        >['request']['abi'],
        'afterAgreementCreated',
        TMode
      > & { functionName?: 'afterAgreementCreated' }
    : UseContractWriteConfig<
        typeof flowSplitterABI,
        'afterAgreementCreated',
        TMode
      > & {
        abi?: never
        functionName?: 'afterAgreementCreated'
      } = {} as any,
) {
  return useContractWrite<
    typeof flowSplitterABI,
    'afterAgreementCreated',
    TMode
  >({
    abi: flowSplitterABI,
    functionName: 'afterAgreementCreated',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link flowSplitterABI}__ and `functionName` set to `"afterAgreementTerminated"`.
 */
export function useFlowSplitterAfterAgreementTerminated<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof flowSplitterABI,
          'afterAgreementTerminated'
        >['request']['abi'],
        'afterAgreementTerminated',
        TMode
      > & { functionName?: 'afterAgreementTerminated' }
    : UseContractWriteConfig<
        typeof flowSplitterABI,
        'afterAgreementTerminated',
        TMode
      > & {
        abi?: never
        functionName?: 'afterAgreementTerminated'
      } = {} as any,
) {
  return useContractWrite<
    typeof flowSplitterABI,
    'afterAgreementTerminated',
    TMode
  >({
    abi: flowSplitterABI,
    functionName: 'afterAgreementTerminated',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link flowSplitterABI}__ and `functionName` set to `"afterAgreementUpdated"`.
 */
export function useFlowSplitterAfterAgreementUpdated<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof flowSplitterABI,
          'afterAgreementUpdated'
        >['request']['abi'],
        'afterAgreementUpdated',
        TMode
      > & { functionName?: 'afterAgreementUpdated' }
    : UseContractWriteConfig<
        typeof flowSplitterABI,
        'afterAgreementUpdated',
        TMode
      > & {
        abi?: never
        functionName?: 'afterAgreementUpdated'
      } = {} as any,
) {
  return useContractWrite<
    typeof flowSplitterABI,
    'afterAgreementUpdated',
    TMode
  >({
    abi: flowSplitterABI,
    functionName: 'afterAgreementUpdated',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link flowSplitterABI}__ and `functionName` set to `"updateSplit"`.
 */
export function useFlowSplitterUpdateSplit<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof flowSplitterABI,
          'updateSplit'
        >['request']['abi'],
        'updateSplit',
        TMode
      > & { functionName?: 'updateSplit' }
    : UseContractWriteConfig<typeof flowSplitterABI, 'updateSplit', TMode> & {
        abi?: never
        functionName?: 'updateSplit'
      } = {} as any,
) {
  return useContractWrite<typeof flowSplitterABI, 'updateSplit', TMode>({
    abi: flowSplitterABI,
    functionName: 'updateSplit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link flowSplitterABI}__.
 */
export function usePrepareFlowSplitterWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof flowSplitterABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: flowSplitterABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof flowSplitterABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link flowSplitterABI}__ and `functionName` set to `"afterAgreementCreated"`.
 */
export function usePrepareFlowSplitterAfterAgreementCreated(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof flowSplitterABI,
      'afterAgreementCreated'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: flowSplitterABI,
    functionName: 'afterAgreementCreated',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof flowSplitterABI,
    'afterAgreementCreated'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link flowSplitterABI}__ and `functionName` set to `"afterAgreementTerminated"`.
 */
export function usePrepareFlowSplitterAfterAgreementTerminated(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof flowSplitterABI,
      'afterAgreementTerminated'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: flowSplitterABI,
    functionName: 'afterAgreementTerminated',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof flowSplitterABI,
    'afterAgreementTerminated'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link flowSplitterABI}__ and `functionName` set to `"afterAgreementUpdated"`.
 */
export function usePrepareFlowSplitterAfterAgreementUpdated(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof flowSplitterABI,
      'afterAgreementUpdated'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: flowSplitterABI,
    functionName: 'afterAgreementUpdated',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof flowSplitterABI,
    'afterAgreementUpdated'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link flowSplitterABI}__ and `functionName` set to `"updateSplit"`.
 */
export function usePrepareFlowSplitterUpdateSplit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof flowSplitterABI, 'updateSplit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: flowSplitterABI,
    functionName: 'updateSplit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof flowSplitterABI, 'updateSplit'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link flowSplitterABI}__.
 */
export function useFlowSplitterEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof flowSplitterABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: flowSplitterABI,
    ...config,
  } as UseContractEventConfig<typeof flowSplitterABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link flowSplitterABI}__ and `eventName` set to `"SplitUpdated"`.
 */
export function useFlowSplitterSplitUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof flowSplitterABI, 'SplitUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: flowSplitterABI,
    eventName: 'SplitUpdated',
    ...config,
  } as UseContractEventConfig<typeof flowSplitterABI, 'SplitUpdated'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link flowSplitterFactoryABI}__.
 */
export function useFlowSplitterFactoryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof flowSplitterFactoryABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof flowSplitterFactoryABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: flowSplitterFactoryABI,
    ...config,
  } as UseContractReadConfig<
    typeof flowSplitterFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link flowSplitterFactoryABI}__ and `functionName` set to `"HOST"`.
 */
export function useFlowSplitterFactoryHost<
  TFunctionName extends 'HOST',
  TSelectData = ReadContractResult<
    typeof flowSplitterFactoryABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof flowSplitterFactoryABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: flowSplitterFactoryABI,
    functionName: 'HOST',
    ...config,
  } as UseContractReadConfig<
    typeof flowSplitterFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link flowSplitterFactoryABI}__.
 */
export function useFlowSplitterFactoryWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof flowSplitterFactoryABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof flowSplitterFactoryABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof flowSplitterFactoryABI, TFunctionName, TMode>({
    abi: flowSplitterFactoryABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link flowSplitterFactoryABI}__ and `functionName` set to `"deployFlowSplitter"`.
 */
export function useFlowSplitterFactoryDeployFlowSplitter<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof flowSplitterFactoryABI,
          'deployFlowSplitter'
        >['request']['abi'],
        'deployFlowSplitter',
        TMode
      > & { functionName?: 'deployFlowSplitter' }
    : UseContractWriteConfig<
        typeof flowSplitterFactoryABI,
        'deployFlowSplitter',
        TMode
      > & {
        abi?: never
        functionName?: 'deployFlowSplitter'
      } = {} as any,
) {
  return useContractWrite<
    typeof flowSplitterFactoryABI,
    'deployFlowSplitter',
    TMode
  >({
    abi: flowSplitterFactoryABI,
    functionName: 'deployFlowSplitter',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link flowSplitterFactoryABI}__.
 */
export function usePrepareFlowSplitterFactoryWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof flowSplitterFactoryABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: flowSplitterFactoryABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof flowSplitterFactoryABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link flowSplitterFactoryABI}__ and `functionName` set to `"deployFlowSplitter"`.
 */
export function usePrepareFlowSplitterFactoryDeployFlowSplitter(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof flowSplitterFactoryABI,
      'deployFlowSplitter'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: flowSplitterFactoryABI,
    functionName: 'deployFlowSplitter',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof flowSplitterFactoryABI,
    'deployFlowSplitter'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link flowSplitterFactoryABI}__.
 */
export function useFlowSplitterFactoryEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof flowSplitterFactoryABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: flowSplitterFactoryABI,
    ...config,
  } as UseContractEventConfig<typeof flowSplitterFactoryABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link flowSplitterFactoryABI}__ and `eventName` set to `"FlowSplitterCreated"`.
 */
export function useFlowSplitterFactoryFlowSplitterCreatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof flowSplitterFactoryABI,
      'FlowSplitterCreated'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: flowSplitterFactoryABI,
    eventName: 'FlowSplitterCreated',
    ...config,
  } as UseContractEventConfig<
    typeof flowSplitterFactoryABI,
    'FlowSplitterCreated'
  >)
}
