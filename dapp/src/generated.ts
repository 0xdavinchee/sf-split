// Generated by @wagmi/cli@1.3.0 on 7/25/2023 at 1:42:26 PM
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// FlowSplitter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const flowSplitterABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'host_', internalType: 'contract ISuperfluid', type: 'address' },
      {
        name: 'acceptedSuperToken_',
        internalType: 'contract ISuperToken',
        type: 'address',
      },
      { name: 'creator_', internalType: 'address', type: 'address' },
      { name: 'mainReceiver_', internalType: 'address', type: 'address' },
      { name: 'sideReceiver_', internalType: 'address', type: 'address' },
      { name: 'sideReceiverPortion_', internalType: 'int96', type: 'int96' },
    ],
  },
  { type: 'error', inputs: [], name: 'INVALID_PORTION' },
  { type: 'error', inputs: [], name: 'NOT_CREATOR' },
  { type: 'error', inputs: [], name: 'NO_SELF_FLOW' },
  { type: 'error', inputs: [], name: 'NotAcceptedSuperToken' },
  { type: 'error', inputs: [], name: 'NotImplemented' },
  { type: 'error', inputs: [], name: 'SAME_RECEIVERS_NOT_ALLOWED' },
  { type: 'error', inputs: [], name: 'UnauthorizedHost' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'mainReceiverPortion',
        internalType: 'int96',
        type: 'int96',
        indexed: false,
      },
      {
        name: 'newSideReceiverPortion',
        internalType: 'int96',
        type: 'int96',
        indexed: false,
      },
    ],
    name: 'SplitUpdated',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ACCEPTED_SUPER_TOKEN',
    outputs: [
      { name: '', internalType: 'contract ISuperToken', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'CFAV1_TYPE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'CREATOR',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'HOST',
    outputs: [
      { name: '', internalType: 'contract ISuperfluid', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MAIN_RECEIVER',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'SIDE_RECEIVER',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'superToken',
        internalType: 'contract ISuperToken',
        type: 'address',
      },
      { name: 'agreementClass', internalType: 'address', type: 'address' },
      { name: '', internalType: 'bytes32', type: 'bytes32' },
      { name: 'agreementData', internalType: 'bytes', type: 'bytes' },
      { name: '', internalType: 'bytes', type: 'bytes' },
      { name: 'ctx', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'afterAgreementCreated',
    outputs: [{ name: 'newCtx', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'superToken',
        internalType: 'contract ISuperToken',
        type: 'address',
      },
      { name: 'agreementClass', internalType: 'address', type: 'address' },
      { name: '', internalType: 'bytes32', type: 'bytes32' },
      { name: 'agreementData', internalType: 'bytes', type: 'bytes' },
      { name: 'cbdata', internalType: 'bytes', type: 'bytes' },
      { name: 'ctx', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'afterAgreementTerminated',
    outputs: [{ name: 'newCtx', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'superToken',
        internalType: 'contract ISuperToken',
        type: 'address',
      },
      { name: 'agreementClass', internalType: 'address', type: 'address' },
      { name: '', internalType: 'bytes32', type: 'bytes32' },
      { name: 'agreementData', internalType: 'bytes', type: 'bytes' },
      { name: 'cbdata', internalType: 'bytes', type: 'bytes' },
      { name: 'ctx', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'afterAgreementUpdated',
    outputs: [{ name: 'newCtx', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '', internalType: 'contract ISuperToken', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'bytes32', type: 'bytes32' },
      { name: '', internalType: 'bytes', type: 'bytes' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'beforeAgreementCreated',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'superToken',
        internalType: 'contract ISuperToken',
        type: 'address',
      },
      { name: 'agreementClass', internalType: 'address', type: 'address' },
      { name: '', internalType: 'bytes32', type: 'bytes32' },
      { name: 'agreementData', internalType: 'bytes', type: 'bytes' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'beforeAgreementTerminated',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'superToken',
        internalType: 'contract ISuperToken',
        type: 'address',
      },
      { name: 'agreementClass', internalType: 'address', type: 'address' },
      { name: '', internalType: 'bytes32', type: 'bytes32' },
      { name: 'agreementData', internalType: 'bytes', type: 'bytes' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'beforeAgreementUpdated',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'flowRate_', internalType: 'int96', type: 'int96' },
      { name: 'sideReceiverPortion_', internalType: 'int96', type: 'int96' },
    ],
    name: 'getMainAndSideReceiverFlowRates',
    outputs: [
      { name: 'mainFlowRate', internalType: 'int96', type: 'int96' },
      { name: 'sideFlowRate', internalType: 'int96', type: 'int96' },
      { name: 'residualFlowRate', internalType: 'int96', type: 'int96' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'superToken_',
        internalType: 'contract ISuperToken',
        type: 'address',
      },
    ],
    name: 'isAcceptedSuperToken',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'sideReceiverPortion',
    outputs: [{ name: '', internalType: 'int96', type: 'int96' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newSideReceiverPortion_', internalType: 'int96', type: 'int96' },
    ],
    name: 'updateSplit',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// FlowSplitterFactory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const flowSplitterFactoryABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'host_', internalType: 'contract ISuperfluid', type: 'address' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'superToken',
        internalType: 'contract ISuperToken',
        type: 'address',
        indexed: true,
      },
      {
        name: 'flowSplitterCreator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'mainReceiver',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'sideReceiver',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'flowSplitter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'mainReceiverPortion',
        internalType: 'int96',
        type: 'int96',
        indexed: false,
      },
      {
        name: 'sideReceiverPortion',
        internalType: 'int96',
        type: 'int96',
        indexed: false,
      },
    ],
    name: 'FlowSplitterCreated',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'HOST',
    outputs: [
      { name: '', internalType: 'contract ISuperfluid', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'superToken_',
        internalType: 'contract ISuperToken',
        type: 'address',
      },
      { name: 'mainReceiver_', internalType: 'address', type: 'address' },
      { name: 'sideReceiver_', internalType: 'address', type: 'address' },
      { name: 'sideReceiverPortion_', internalType: 'int96', type: 'int96' },
    ],
    name: 'deployFlowSplitter',
    outputs: [
      { name: 'flowSplitter', internalType: 'address', type: 'address' },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CFAv1Forwarder
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const cfAv1ForwarderABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'host', internalType: 'contract ISuperfluid', type: 'address' },
    ],
  },
  { type: 'error', inputs: [], name: 'CFA_FWD_INVALID_FLOW_RATE' },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'contract ISuperToken', type: 'address' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'receiver', internalType: 'address', type: 'address' },
      { name: 'flowrate', internalType: 'int96', type: 'int96' },
      { name: 'userData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'createFlow',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'contract ISuperToken', type: 'address' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'receiver', internalType: 'address', type: 'address' },
      { name: 'userData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'deleteFlow',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'contract ISuperToken', type: 'address' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'getAccountFlowInfo',
    outputs: [
      { name: 'lastUpdated', internalType: 'uint256', type: 'uint256' },
      { name: 'flowrate', internalType: 'int96', type: 'int96' },
      { name: 'deposit', internalType: 'uint256', type: 'uint256' },
      { name: 'owedDeposit', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'contract ISuperToken', type: 'address' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'getAccountFlowrate',
    outputs: [{ name: 'flowrate', internalType: 'int96', type: 'int96' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'contract ISuperToken', type: 'address' },
      { name: 'flowrate', internalType: 'int96', type: 'int96' },
    ],
    name: 'getBufferAmountByFlowrate',
    outputs: [
      { name: 'bufferAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'contract ISuperToken', type: 'address' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'receiver', internalType: 'address', type: 'address' },
    ],
    name: 'getFlowInfo',
    outputs: [
      { name: 'lastUpdated', internalType: 'uint256', type: 'uint256' },
      { name: 'flowrate', internalType: 'int96', type: 'int96' },
      { name: 'deposit', internalType: 'uint256', type: 'uint256' },
      { name: 'owedDeposit', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'contract ISuperToken', type: 'address' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'flowOperator', internalType: 'address', type: 'address' },
    ],
    name: 'getFlowOperatorPermissions',
    outputs: [
      { name: 'permissions', internalType: 'uint8', type: 'uint8' },
      { name: 'flowrateAllowance', internalType: 'int96', type: 'int96' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'contract ISuperToken', type: 'address' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'receiver', internalType: 'address', type: 'address' },
    ],
    name: 'getFlowrate',
    outputs: [{ name: 'flowrate', internalType: 'int96', type: 'int96' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'contract ISuperToken', type: 'address' },
      { name: 'flowOperator', internalType: 'address', type: 'address' },
    ],
    name: 'grantPermissions',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'contract ISuperToken', type: 'address' },
      { name: 'flowOperator', internalType: 'address', type: 'address' },
    ],
    name: 'revokePermissions',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'contract ISuperToken', type: 'address' },
      { name: 'receiver', internalType: 'address', type: 'address' },
      { name: 'flowrate', internalType: 'int96', type: 'int96' },
    ],
    name: 'setFlowrate',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'contract ISuperToken', type: 'address' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'receiver', internalType: 'address', type: 'address' },
      { name: 'flowrate', internalType: 'int96', type: 'int96' },
    ],
    name: 'setFlowrateFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'contract ISuperToken', type: 'address' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'receiver', internalType: 'address', type: 'address' },
      { name: 'flowrate', internalType: 'int96', type: 'int96' },
      { name: 'userData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'updateFlow',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'contract ISuperToken', type: 'address' },
      { name: 'flowOperator', internalType: 'address', type: 'address' },
      { name: 'permissions', internalType: 'uint8', type: 'uint8' },
      { name: 'flowrateAllowance', internalType: 'int96', type: 'int96' },
    ],
    name: 'updateFlowOperatorPermissions',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// erc20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20ABI = [
  {
    type: 'event',
    inputs: [
      { name: 'owner', type: 'address', indexed: true },
      { name: 'spender', type: 'address', indexed: true },
      { name: 'value', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    inputs: [
      { name: 'from', type: 'address', indexed: true },
      { name: 'to', type: 'address', indexed: true },
      { name: 'value', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', type: 'address' },
      { name: 'spender', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', type: 'address' },
      { name: 'amount', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', type: 'address' },
      { name: 'amount', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sender', type: 'address' },
      { name: 'recipient', type: 'address' },
      { name: 'amount', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link flowSplitterABI}__.
 */
export function useFlowSplitterRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof flowSplitterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof flowSplitterABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: flowSplitterABI,
    ...config,
  } as UseContractReadConfig<
    typeof flowSplitterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link flowSplitterABI}__ and `functionName` set to `"ACCEPTED_SUPER_TOKEN"`.
 */
export function useFlowSplitterAcceptedSuperToken<
  TFunctionName extends 'ACCEPTED_SUPER_TOKEN',
  TSelectData = ReadContractResult<typeof flowSplitterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof flowSplitterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: flowSplitterABI,
    functionName: 'ACCEPTED_SUPER_TOKEN',
    ...config,
  } as UseContractReadConfig<
    typeof flowSplitterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link flowSplitterABI}__ and `functionName` set to `"CFAV1_TYPE"`.
 */
export function useFlowSplitterCfav1Type<
  TFunctionName extends 'CFAV1_TYPE',
  TSelectData = ReadContractResult<typeof flowSplitterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof flowSplitterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: flowSplitterABI,
    functionName: 'CFAV1_TYPE',
    ...config,
  } as UseContractReadConfig<
    typeof flowSplitterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link flowSplitterABI}__ and `functionName` set to `"CREATOR"`.
 */
export function useFlowSplitterCreator<
  TFunctionName extends 'CREATOR',
  TSelectData = ReadContractResult<typeof flowSplitterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof flowSplitterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: flowSplitterABI,
    functionName: 'CREATOR',
    ...config,
  } as UseContractReadConfig<
    typeof flowSplitterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link flowSplitterABI}__ and `functionName` set to `"HOST"`.
 */
export function useFlowSplitterHost<
  TFunctionName extends 'HOST',
  TSelectData = ReadContractResult<typeof flowSplitterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof flowSplitterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: flowSplitterABI,
    functionName: 'HOST',
    ...config,
  } as UseContractReadConfig<
    typeof flowSplitterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link flowSplitterABI}__ and `functionName` set to `"MAIN_RECEIVER"`.
 */
export function useFlowSplitterMainReceiver<
  TFunctionName extends 'MAIN_RECEIVER',
  TSelectData = ReadContractResult<typeof flowSplitterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof flowSplitterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: flowSplitterABI,
    functionName: 'MAIN_RECEIVER',
    ...config,
  } as UseContractReadConfig<
    typeof flowSplitterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link flowSplitterABI}__ and `functionName` set to `"SIDE_RECEIVER"`.
 */
export function useFlowSplitterSideReceiver<
  TFunctionName extends 'SIDE_RECEIVER',
  TSelectData = ReadContractResult<typeof flowSplitterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof flowSplitterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: flowSplitterABI,
    functionName: 'SIDE_RECEIVER',
    ...config,
  } as UseContractReadConfig<
    typeof flowSplitterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link flowSplitterABI}__ and `functionName` set to `"beforeAgreementCreated"`.
 */
export function useFlowSplitterBeforeAgreementCreated<
  TFunctionName extends 'beforeAgreementCreated',
  TSelectData = ReadContractResult<typeof flowSplitterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof flowSplitterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: flowSplitterABI,
    functionName: 'beforeAgreementCreated',
    ...config,
  } as UseContractReadConfig<
    typeof flowSplitterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link flowSplitterABI}__ and `functionName` set to `"beforeAgreementTerminated"`.
 */
export function useFlowSplitterBeforeAgreementTerminated<
  TFunctionName extends 'beforeAgreementTerminated',
  TSelectData = ReadContractResult<typeof flowSplitterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof flowSplitterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: flowSplitterABI,
    functionName: 'beforeAgreementTerminated',
    ...config,
  } as UseContractReadConfig<
    typeof flowSplitterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link flowSplitterABI}__ and `functionName` set to `"beforeAgreementUpdated"`.
 */
export function useFlowSplitterBeforeAgreementUpdated<
  TFunctionName extends 'beforeAgreementUpdated',
  TSelectData = ReadContractResult<typeof flowSplitterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof flowSplitterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: flowSplitterABI,
    functionName: 'beforeAgreementUpdated',
    ...config,
  } as UseContractReadConfig<
    typeof flowSplitterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link flowSplitterABI}__ and `functionName` set to `"getMainAndSideReceiverFlowRates"`.
 */
export function useFlowSplitterGetMainAndSideReceiverFlowRates<
  TFunctionName extends 'getMainAndSideReceiverFlowRates',
  TSelectData = ReadContractResult<typeof flowSplitterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof flowSplitterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: flowSplitterABI,
    functionName: 'getMainAndSideReceiverFlowRates',
    ...config,
  } as UseContractReadConfig<
    typeof flowSplitterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link flowSplitterABI}__ and `functionName` set to `"isAcceptedSuperToken"`.
 */
export function useFlowSplitterIsAcceptedSuperToken<
  TFunctionName extends 'isAcceptedSuperToken',
  TSelectData = ReadContractResult<typeof flowSplitterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof flowSplitterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: flowSplitterABI,
    functionName: 'isAcceptedSuperToken',
    ...config,
  } as UseContractReadConfig<
    typeof flowSplitterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link flowSplitterABI}__ and `functionName` set to `"sideReceiverPortion"`.
 */
export function useFlowSplitterSideReceiverPortion<
  TFunctionName extends 'sideReceiverPortion',
  TSelectData = ReadContractResult<typeof flowSplitterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof flowSplitterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: flowSplitterABI,
    functionName: 'sideReceiverPortion',
    ...config,
  } as UseContractReadConfig<
    typeof flowSplitterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link flowSplitterABI}__.
 */
export function useFlowSplitterWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof flowSplitterABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof flowSplitterABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof flowSplitterABI, TFunctionName, TMode>({
    abi: flowSplitterABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link flowSplitterABI}__ and `functionName` set to `"afterAgreementCreated"`.
 */
export function useFlowSplitterAfterAgreementCreated<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof flowSplitterABI,
          'afterAgreementCreated'
        >['request']['abi'],
        'afterAgreementCreated',
        TMode
      > & { functionName?: 'afterAgreementCreated' }
    : UseContractWriteConfig<
        typeof flowSplitterABI,
        'afterAgreementCreated',
        TMode
      > & {
        abi?: never
        functionName?: 'afterAgreementCreated'
      } = {} as any,
) {
  return useContractWrite<
    typeof flowSplitterABI,
    'afterAgreementCreated',
    TMode
  >({
    abi: flowSplitterABI,
    functionName: 'afterAgreementCreated',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link flowSplitterABI}__ and `functionName` set to `"afterAgreementTerminated"`.
 */
export function useFlowSplitterAfterAgreementTerminated<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof flowSplitterABI,
          'afterAgreementTerminated'
        >['request']['abi'],
        'afterAgreementTerminated',
        TMode
      > & { functionName?: 'afterAgreementTerminated' }
    : UseContractWriteConfig<
        typeof flowSplitterABI,
        'afterAgreementTerminated',
        TMode
      > & {
        abi?: never
        functionName?: 'afterAgreementTerminated'
      } = {} as any,
) {
  return useContractWrite<
    typeof flowSplitterABI,
    'afterAgreementTerminated',
    TMode
  >({
    abi: flowSplitterABI,
    functionName: 'afterAgreementTerminated',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link flowSplitterABI}__ and `functionName` set to `"afterAgreementUpdated"`.
 */
export function useFlowSplitterAfterAgreementUpdated<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof flowSplitterABI,
          'afterAgreementUpdated'
        >['request']['abi'],
        'afterAgreementUpdated',
        TMode
      > & { functionName?: 'afterAgreementUpdated' }
    : UseContractWriteConfig<
        typeof flowSplitterABI,
        'afterAgreementUpdated',
        TMode
      > & {
        abi?: never
        functionName?: 'afterAgreementUpdated'
      } = {} as any,
) {
  return useContractWrite<
    typeof flowSplitterABI,
    'afterAgreementUpdated',
    TMode
  >({
    abi: flowSplitterABI,
    functionName: 'afterAgreementUpdated',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link flowSplitterABI}__ and `functionName` set to `"updateSplit"`.
 */
export function useFlowSplitterUpdateSplit<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof flowSplitterABI,
          'updateSplit'
        >['request']['abi'],
        'updateSplit',
        TMode
      > & { functionName?: 'updateSplit' }
    : UseContractWriteConfig<typeof flowSplitterABI, 'updateSplit', TMode> & {
        abi?: never
        functionName?: 'updateSplit'
      } = {} as any,
) {
  return useContractWrite<typeof flowSplitterABI, 'updateSplit', TMode>({
    abi: flowSplitterABI,
    functionName: 'updateSplit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link flowSplitterABI}__.
 */
export function usePrepareFlowSplitterWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof flowSplitterABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: flowSplitterABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof flowSplitterABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link flowSplitterABI}__ and `functionName` set to `"afterAgreementCreated"`.
 */
export function usePrepareFlowSplitterAfterAgreementCreated(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof flowSplitterABI,
      'afterAgreementCreated'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: flowSplitterABI,
    functionName: 'afterAgreementCreated',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof flowSplitterABI,
    'afterAgreementCreated'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link flowSplitterABI}__ and `functionName` set to `"afterAgreementTerminated"`.
 */
export function usePrepareFlowSplitterAfterAgreementTerminated(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof flowSplitterABI,
      'afterAgreementTerminated'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: flowSplitterABI,
    functionName: 'afterAgreementTerminated',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof flowSplitterABI,
    'afterAgreementTerminated'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link flowSplitterABI}__ and `functionName` set to `"afterAgreementUpdated"`.
 */
export function usePrepareFlowSplitterAfterAgreementUpdated(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof flowSplitterABI,
      'afterAgreementUpdated'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: flowSplitterABI,
    functionName: 'afterAgreementUpdated',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof flowSplitterABI,
    'afterAgreementUpdated'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link flowSplitterABI}__ and `functionName` set to `"updateSplit"`.
 */
export function usePrepareFlowSplitterUpdateSplit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof flowSplitterABI, 'updateSplit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: flowSplitterABI,
    functionName: 'updateSplit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof flowSplitterABI, 'updateSplit'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link flowSplitterABI}__.
 */
export function useFlowSplitterEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof flowSplitterABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: flowSplitterABI,
    ...config,
  } as UseContractEventConfig<typeof flowSplitterABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link flowSplitterABI}__ and `eventName` set to `"SplitUpdated"`.
 */
export function useFlowSplitterSplitUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof flowSplitterABI, 'SplitUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: flowSplitterABI,
    eventName: 'SplitUpdated',
    ...config,
  } as UseContractEventConfig<typeof flowSplitterABI, 'SplitUpdated'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link flowSplitterFactoryABI}__.
 */
export function useFlowSplitterFactoryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof flowSplitterFactoryABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof flowSplitterFactoryABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: flowSplitterFactoryABI,
    ...config,
  } as UseContractReadConfig<
    typeof flowSplitterFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link flowSplitterFactoryABI}__ and `functionName` set to `"HOST"`.
 */
export function useFlowSplitterFactoryHost<
  TFunctionName extends 'HOST',
  TSelectData = ReadContractResult<
    typeof flowSplitterFactoryABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof flowSplitterFactoryABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: flowSplitterFactoryABI,
    functionName: 'HOST',
    ...config,
  } as UseContractReadConfig<
    typeof flowSplitterFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link flowSplitterFactoryABI}__.
 */
export function useFlowSplitterFactoryWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof flowSplitterFactoryABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof flowSplitterFactoryABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof flowSplitterFactoryABI, TFunctionName, TMode>({
    abi: flowSplitterFactoryABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link flowSplitterFactoryABI}__ and `functionName` set to `"deployFlowSplitter"`.
 */
export function useFlowSplitterFactoryDeployFlowSplitter<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof flowSplitterFactoryABI,
          'deployFlowSplitter'
        >['request']['abi'],
        'deployFlowSplitter',
        TMode
      > & { functionName?: 'deployFlowSplitter' }
    : UseContractWriteConfig<
        typeof flowSplitterFactoryABI,
        'deployFlowSplitter',
        TMode
      > & {
        abi?: never
        functionName?: 'deployFlowSplitter'
      } = {} as any,
) {
  return useContractWrite<
    typeof flowSplitterFactoryABI,
    'deployFlowSplitter',
    TMode
  >({
    abi: flowSplitterFactoryABI,
    functionName: 'deployFlowSplitter',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link flowSplitterFactoryABI}__.
 */
export function usePrepareFlowSplitterFactoryWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof flowSplitterFactoryABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: flowSplitterFactoryABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof flowSplitterFactoryABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link flowSplitterFactoryABI}__ and `functionName` set to `"deployFlowSplitter"`.
 */
export function usePrepareFlowSplitterFactoryDeployFlowSplitter(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof flowSplitterFactoryABI,
      'deployFlowSplitter'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: flowSplitterFactoryABI,
    functionName: 'deployFlowSplitter',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof flowSplitterFactoryABI,
    'deployFlowSplitter'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link flowSplitterFactoryABI}__.
 */
export function useFlowSplitterFactoryEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof flowSplitterFactoryABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: flowSplitterFactoryABI,
    ...config,
  } as UseContractEventConfig<typeof flowSplitterFactoryABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link flowSplitterFactoryABI}__ and `eventName` set to `"FlowSplitterCreated"`.
 */
export function useFlowSplitterFactoryFlowSplitterCreatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof flowSplitterFactoryABI,
      'FlowSplitterCreated'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: flowSplitterFactoryABI,
    eventName: 'FlowSplitterCreated',
    ...config,
  } as UseContractEventConfig<
    typeof flowSplitterFactoryABI,
    'FlowSplitterCreated'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cfAv1ForwarderABI}__.
 */
export function useCfAv1ForwarderRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof cfAv1ForwarderABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof cfAv1ForwarderABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: cfAv1ForwarderABI,
    ...config,
  } as UseContractReadConfig<
    typeof cfAv1ForwarderABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cfAv1ForwarderABI}__ and `functionName` set to `"getAccountFlowInfo"`.
 */
export function useCfAv1ForwarderGetAccountFlowInfo<
  TFunctionName extends 'getAccountFlowInfo',
  TSelectData = ReadContractResult<typeof cfAv1ForwarderABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof cfAv1ForwarderABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cfAv1ForwarderABI,
    functionName: 'getAccountFlowInfo',
    ...config,
  } as UseContractReadConfig<
    typeof cfAv1ForwarderABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cfAv1ForwarderABI}__ and `functionName` set to `"getAccountFlowrate"`.
 */
export function useCfAv1ForwarderGetAccountFlowrate<
  TFunctionName extends 'getAccountFlowrate',
  TSelectData = ReadContractResult<typeof cfAv1ForwarderABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof cfAv1ForwarderABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cfAv1ForwarderABI,
    functionName: 'getAccountFlowrate',
    ...config,
  } as UseContractReadConfig<
    typeof cfAv1ForwarderABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cfAv1ForwarderABI}__ and `functionName` set to `"getBufferAmountByFlowrate"`.
 */
export function useCfAv1ForwarderGetBufferAmountByFlowrate<
  TFunctionName extends 'getBufferAmountByFlowrate',
  TSelectData = ReadContractResult<typeof cfAv1ForwarderABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof cfAv1ForwarderABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cfAv1ForwarderABI,
    functionName: 'getBufferAmountByFlowrate',
    ...config,
  } as UseContractReadConfig<
    typeof cfAv1ForwarderABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cfAv1ForwarderABI}__ and `functionName` set to `"getFlowInfo"`.
 */
export function useCfAv1ForwarderGetFlowInfo<
  TFunctionName extends 'getFlowInfo',
  TSelectData = ReadContractResult<typeof cfAv1ForwarderABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof cfAv1ForwarderABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cfAv1ForwarderABI,
    functionName: 'getFlowInfo',
    ...config,
  } as UseContractReadConfig<
    typeof cfAv1ForwarderABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cfAv1ForwarderABI}__ and `functionName` set to `"getFlowOperatorPermissions"`.
 */
export function useCfAv1ForwarderGetFlowOperatorPermissions<
  TFunctionName extends 'getFlowOperatorPermissions',
  TSelectData = ReadContractResult<typeof cfAv1ForwarderABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof cfAv1ForwarderABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cfAv1ForwarderABI,
    functionName: 'getFlowOperatorPermissions',
    ...config,
  } as UseContractReadConfig<
    typeof cfAv1ForwarderABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link cfAv1ForwarderABI}__ and `functionName` set to `"getFlowrate"`.
 */
export function useCfAv1ForwarderGetFlowrate<
  TFunctionName extends 'getFlowrate',
  TSelectData = ReadContractResult<typeof cfAv1ForwarderABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof cfAv1ForwarderABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: cfAv1ForwarderABI,
    functionName: 'getFlowrate',
    ...config,
  } as UseContractReadConfig<
    typeof cfAv1ForwarderABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cfAv1ForwarderABI}__.
 */
export function useCfAv1ForwarderWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof cfAv1ForwarderABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof cfAv1ForwarderABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof cfAv1ForwarderABI, TFunctionName, TMode>({
    abi: cfAv1ForwarderABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cfAv1ForwarderABI}__ and `functionName` set to `"createFlow"`.
 */
export function useCfAv1ForwarderCreateFlow<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof cfAv1ForwarderABI,
          'createFlow'
        >['request']['abi'],
        'createFlow',
        TMode
      > & { functionName?: 'createFlow' }
    : UseContractWriteConfig<typeof cfAv1ForwarderABI, 'createFlow', TMode> & {
        abi?: never
        functionName?: 'createFlow'
      } = {} as any,
) {
  return useContractWrite<typeof cfAv1ForwarderABI, 'createFlow', TMode>({
    abi: cfAv1ForwarderABI,
    functionName: 'createFlow',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cfAv1ForwarderABI}__ and `functionName` set to `"deleteFlow"`.
 */
export function useCfAv1ForwarderDeleteFlow<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof cfAv1ForwarderABI,
          'deleteFlow'
        >['request']['abi'],
        'deleteFlow',
        TMode
      > & { functionName?: 'deleteFlow' }
    : UseContractWriteConfig<typeof cfAv1ForwarderABI, 'deleteFlow', TMode> & {
        abi?: never
        functionName?: 'deleteFlow'
      } = {} as any,
) {
  return useContractWrite<typeof cfAv1ForwarderABI, 'deleteFlow', TMode>({
    abi: cfAv1ForwarderABI,
    functionName: 'deleteFlow',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cfAv1ForwarderABI}__ and `functionName` set to `"grantPermissions"`.
 */
export function useCfAv1ForwarderGrantPermissions<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof cfAv1ForwarderABI,
          'grantPermissions'
        >['request']['abi'],
        'grantPermissions',
        TMode
      > & { functionName?: 'grantPermissions' }
    : UseContractWriteConfig<
        typeof cfAv1ForwarderABI,
        'grantPermissions',
        TMode
      > & {
        abi?: never
        functionName?: 'grantPermissions'
      } = {} as any,
) {
  return useContractWrite<typeof cfAv1ForwarderABI, 'grantPermissions', TMode>({
    abi: cfAv1ForwarderABI,
    functionName: 'grantPermissions',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cfAv1ForwarderABI}__ and `functionName` set to `"revokePermissions"`.
 */
export function useCfAv1ForwarderRevokePermissions<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof cfAv1ForwarderABI,
          'revokePermissions'
        >['request']['abi'],
        'revokePermissions',
        TMode
      > & { functionName?: 'revokePermissions' }
    : UseContractWriteConfig<
        typeof cfAv1ForwarderABI,
        'revokePermissions',
        TMode
      > & {
        abi?: never
        functionName?: 'revokePermissions'
      } = {} as any,
) {
  return useContractWrite<typeof cfAv1ForwarderABI, 'revokePermissions', TMode>(
    {
      abi: cfAv1ForwarderABI,
      functionName: 'revokePermissions',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cfAv1ForwarderABI}__ and `functionName` set to `"setFlowrate"`.
 */
export function useCfAv1ForwarderSetFlowrate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof cfAv1ForwarderABI,
          'setFlowrate'
        >['request']['abi'],
        'setFlowrate',
        TMode
      > & { functionName?: 'setFlowrate' }
    : UseContractWriteConfig<typeof cfAv1ForwarderABI, 'setFlowrate', TMode> & {
        abi?: never
        functionName?: 'setFlowrate'
      } = {} as any,
) {
  return useContractWrite<typeof cfAv1ForwarderABI, 'setFlowrate', TMode>({
    abi: cfAv1ForwarderABI,
    functionName: 'setFlowrate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cfAv1ForwarderABI}__ and `functionName` set to `"setFlowrateFrom"`.
 */
export function useCfAv1ForwarderSetFlowrateFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof cfAv1ForwarderABI,
          'setFlowrateFrom'
        >['request']['abi'],
        'setFlowrateFrom',
        TMode
      > & { functionName?: 'setFlowrateFrom' }
    : UseContractWriteConfig<
        typeof cfAv1ForwarderABI,
        'setFlowrateFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'setFlowrateFrom'
      } = {} as any,
) {
  return useContractWrite<typeof cfAv1ForwarderABI, 'setFlowrateFrom', TMode>({
    abi: cfAv1ForwarderABI,
    functionName: 'setFlowrateFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cfAv1ForwarderABI}__ and `functionName` set to `"updateFlow"`.
 */
export function useCfAv1ForwarderUpdateFlow<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof cfAv1ForwarderABI,
          'updateFlow'
        >['request']['abi'],
        'updateFlow',
        TMode
      > & { functionName?: 'updateFlow' }
    : UseContractWriteConfig<typeof cfAv1ForwarderABI, 'updateFlow', TMode> & {
        abi?: never
        functionName?: 'updateFlow'
      } = {} as any,
) {
  return useContractWrite<typeof cfAv1ForwarderABI, 'updateFlow', TMode>({
    abi: cfAv1ForwarderABI,
    functionName: 'updateFlow',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link cfAv1ForwarderABI}__ and `functionName` set to `"updateFlowOperatorPermissions"`.
 */
export function useCfAv1ForwarderUpdateFlowOperatorPermissions<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof cfAv1ForwarderABI,
          'updateFlowOperatorPermissions'
        >['request']['abi'],
        'updateFlowOperatorPermissions',
        TMode
      > & { functionName?: 'updateFlowOperatorPermissions' }
    : UseContractWriteConfig<
        typeof cfAv1ForwarderABI,
        'updateFlowOperatorPermissions',
        TMode
      > & {
        abi?: never
        functionName?: 'updateFlowOperatorPermissions'
      } = {} as any,
) {
  return useContractWrite<
    typeof cfAv1ForwarderABI,
    'updateFlowOperatorPermissions',
    TMode
  >({
    abi: cfAv1ForwarderABI,
    functionName: 'updateFlowOperatorPermissions',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cfAv1ForwarderABI}__.
 */
export function usePrepareCfAv1ForwarderWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof cfAv1ForwarderABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cfAv1ForwarderABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof cfAv1ForwarderABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cfAv1ForwarderABI}__ and `functionName` set to `"createFlow"`.
 */
export function usePrepareCfAv1ForwarderCreateFlow(
  config: Omit<
    UsePrepareContractWriteConfig<typeof cfAv1ForwarderABI, 'createFlow'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cfAv1ForwarderABI,
    functionName: 'createFlow',
    ...config,
  } as UsePrepareContractWriteConfig<typeof cfAv1ForwarderABI, 'createFlow'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cfAv1ForwarderABI}__ and `functionName` set to `"deleteFlow"`.
 */
export function usePrepareCfAv1ForwarderDeleteFlow(
  config: Omit<
    UsePrepareContractWriteConfig<typeof cfAv1ForwarderABI, 'deleteFlow'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cfAv1ForwarderABI,
    functionName: 'deleteFlow',
    ...config,
  } as UsePrepareContractWriteConfig<typeof cfAv1ForwarderABI, 'deleteFlow'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cfAv1ForwarderABI}__ and `functionName` set to `"grantPermissions"`.
 */
export function usePrepareCfAv1ForwarderGrantPermissions(
  config: Omit<
    UsePrepareContractWriteConfig<typeof cfAv1ForwarderABI, 'grantPermissions'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cfAv1ForwarderABI,
    functionName: 'grantPermissions',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cfAv1ForwarderABI,
    'grantPermissions'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cfAv1ForwarderABI}__ and `functionName` set to `"revokePermissions"`.
 */
export function usePrepareCfAv1ForwarderRevokePermissions(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cfAv1ForwarderABI,
      'revokePermissions'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cfAv1ForwarderABI,
    functionName: 'revokePermissions',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cfAv1ForwarderABI,
    'revokePermissions'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cfAv1ForwarderABI}__ and `functionName` set to `"setFlowrate"`.
 */
export function usePrepareCfAv1ForwarderSetFlowrate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof cfAv1ForwarderABI, 'setFlowrate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cfAv1ForwarderABI,
    functionName: 'setFlowrate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof cfAv1ForwarderABI, 'setFlowrate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cfAv1ForwarderABI}__ and `functionName` set to `"setFlowrateFrom"`.
 */
export function usePrepareCfAv1ForwarderSetFlowrateFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof cfAv1ForwarderABI, 'setFlowrateFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cfAv1ForwarderABI,
    functionName: 'setFlowrateFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cfAv1ForwarderABI,
    'setFlowrateFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cfAv1ForwarderABI}__ and `functionName` set to `"updateFlow"`.
 */
export function usePrepareCfAv1ForwarderUpdateFlow(
  config: Omit<
    UsePrepareContractWriteConfig<typeof cfAv1ForwarderABI, 'updateFlow'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cfAv1ForwarderABI,
    functionName: 'updateFlow',
    ...config,
  } as UsePrepareContractWriteConfig<typeof cfAv1ForwarderABI, 'updateFlow'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link cfAv1ForwarderABI}__ and `functionName` set to `"updateFlowOperatorPermissions"`.
 */
export function usePrepareCfAv1ForwarderUpdateFlowOperatorPermissions(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof cfAv1ForwarderABI,
      'updateFlowOperatorPermissions'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: cfAv1ForwarderABI,
    functionName: 'updateFlowOperatorPermissions',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof cfAv1ForwarderABI,
    'updateFlowOperatorPermissions'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: erc20ABI, ...config } as UseContractReadConfig<
    typeof erc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20Allowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20BalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20Decimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"name"`.
 */
export function useErc20Name<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20Symbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20TotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20ABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof erc20ABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof erc20ABI, TFunctionName, TMode>({
    abi: erc20ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20Approve<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof erc20ABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof erc20ABI, 'approve', TMode>({
    abi: erc20ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20Transfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof erc20ABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<typeof erc20ABI, 'transfer', TMode>({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20TransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof erc20ABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof erc20ABI, 'transferFrom', TMode>({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function usePrepareErc20Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, 'Transfer'>)
}
